#
#   Python backend and Angular frontend code generation by gencrud
#   Copyright (C) 2018-2021 Marc Bertens-Nguyen m.bertens@pe2mbs.nl
#
#   This library is free software; you can redistribute it and/or modify
#   it under the terms of the GNU Library General Public License GPL-2.0-only
#   as published by the Free Software Foundation.
#
#   This library is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License GPL-2.0-only along with this library; if not, write to the
#   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
#   Boston, MA 02110-1301 USA
#
#   gencrud: ${date} version ${version} by user ${username}
#
import webapp2.api as API
from webapp2.common.dbmem import DbBaseMemory
from webapp2.common.crudmixin import CrudModelMixin

% if obj.Mixin.Python.hasModel():
from ${obj.Mixin.Python.Model.filename} import ${obj.Mixin.Python.Model.cls}
% endif
${ obj.table.leadIn }
<%
    def fieldList( colums ):
        return [ '{}'.format( field.name ) for field in colums ]

    def modelClasses( obj ):
        result = [ "API.db.Model", "CrudModelMixin" ]
        if obj.Mixin.Python.hasModel():
            result.append( obj.Mixin.Python.Model.cls )

        return ', '.join( result )
%>

class ${obj.cls}( ${ modelClasses( obj ) } ):
    """Model for the ${obj.name} table, this is generated by the gencrud.py module
    When modifing the file make sure that you remove the table from the configuration.
    """
    __field_list__       = ${ fieldList( obj.table.columns ) }
    __tablename__        = '${ obj.table.name }'
% for field in obj.table.columns:
    ${ '{:20}'.format( field.name ) } = ${ field.sqlAlchemyDef() }
% endfor

% for field in obj.table.columns:
%  if field.ui is not None and field.hasForeignKey() and field.ui.hasService():
    ${ '{:20}'.format( field.name + '_FK' ) } = API.db.relationship( '${ field.ui.service.baseClass }', backref = '${ obj.table.name }', lazy = True )
%  endif
% endfor
% for field in obj.table.columns:
 %if field.hasUniqueKey():
    API.db.UniqueConstraint( '${ field.name }', name='${field.uniqueKey}' )
 % endif
% endfor
% if obj.table.hasUniqueKey():
 % for index, fields in obj.table.uniqueKey.items():
    API.db.UniqueConstraint( ${ fields }, name='${ index }' )
 % endfor
% endif

    def memoryInstance( self ):
        return ${obj.cls}Memory( self )


class ${obj.cls}Memory( DbBaseMemory ):
    __model_cls__   = ${obj.cls}

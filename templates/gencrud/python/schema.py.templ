#
#   Python backend and Angular frontend code generation by gencrud
#   Copyright (C) 2018-2021 Marc Bertens-Nguyen m.bertens@pe2mbs.nl
#
#   This library is free software; you can redistribute it and/or modify
#   it under the terms of the GNU Library General Public License GPL-2.0-only
#   as published by the Free Software Foundation.
#
#   This library is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License GPL-2.0-only along with this library; if not, write to the
#   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
#   Boston, MA 02110-1301 USA
#
#   gencrud: ${date} version ${version} by user ${username}
#
import webapp2.api as API
from webapp2.common.parameters import SerializationDictField
% if obj.Mixin.Python.hasModel():
from ${obj.Mixin.Python.Schema.filename} import ${obj.Mixin.Python.Schema.cls}
% endif

<%
    def schemaClasses( obj ):
        result = [ "API.mm.SQLAlchemySchema" ]
        if obj.Mixin.Python.hasModel():
            result.append( obj.Mixin.Python.Schema.cls )

        return ', '.join( result )

    def schemaFields( obj ):
        fieldList = []
        for field in obj.table.columns:
            if field.pType != '' and field.frontend:
                fieldList.append( '"{}"'.format( field.name ) )

            if field.ui is not None:
                if field.hasForeignKey() and field.ui.hasService():
                    fieldList.append( '"{}_FK"'.format( field.name ) )

                elif field.hasResolveList():
                    fieldList.append( '"{}_LABEL"'.format( field.name ) )

        return ', '.join( fieldList )
%>
class ${ obj.cls }Schema( ${ schemaClasses( obj ) } ):
    """Schema for the ${obj.name} table, this is generated by the gencrud.py module
    When modifing the file make sure that you remove the table from the configuration.
    """
    class Meta:
        fields = [ ${ schemaFields( obj ) } ]

% for field in obj.table.columns:
%  if field.ui is not None:
%   if field.hasForeignKey() and field.ui.hasService():
    ${ '{:20}'.format( field.name + '_FK' ) }    = API.mm.Nested( '${ field.ui.service.baseClass }Schema' )
%   elif field.hasResolveList():
    ${ '{:20}'.format( field.name + '_LABEL' ) }    = SerializationDictField( attribute="${field.name}",
                                                      dictionary = ${ field.ui.resolveListPy } )
%   endif
%  endif
% endfor

${ obj.name }Schema   = ${ obj.cls }Schema()
${ obj.name }sSchema  = ${ obj.cls }Schema( many = True )

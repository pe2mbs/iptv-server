#
#   Python backend and Angular frontend code generation by gencrud
#   Copyright (C) 2018-2021 Marc Bertens-Nguyen m.bertens@pe2mbs.nl
#
#   This library is free software; you can redistribute it and/or modify
#   it under the terms of the GNU Library General Public License GPL-2.0-only
#   as published by the Free Software Foundation.
#
#   This library is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License GPL-2.0-only along with this library; if not, write to the
#   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
#   Boston, MA 02110-1301 USA
#
#   gencrud: 2021-04-04 08:27:09 version 2.1.680 by user mbertens
#
import webapp2.api as API
from webapp2.common.dbmem import DbBaseMemory
from webapp2.common.crudmixin import CrudModelMixin




class RoleAccess( API.db.Model, CrudModelMixin ):
    """Model for the role_access table, this is generated by the gencrud.py module
    When modifing the file make sure that you remove the table from the configuration.
    """
    __field_list__       = ['RA_ID', 'RA_R_ID', 'RA_MA_ID', 'RA_CREATE', 'RA_READ', 'RA_UPDATE', 'RA_DELETE', 'R_REMARK']
    __tablename__        = 'role_access'
    RA_ID                = API.db.Column( "ra_id", API.db.Integer, autoincrement = True, primary_key = True )
    RA_R_ID              = API.db.Column( "ra_r_id", API.db.Integer, API.db.ForeignKey( "roles.r_id" ), nullable = False )
    RA_MA_ID             = API.db.Column( "ra_ma_id", API.db.Integer, API.db.ForeignKey( "mod_access.ma_id" ), nullable = False )
    RA_CREATE            = API.db.Column( "ra_create", API.db.Boolean, default = False )
    RA_READ              = API.db.Column( "ra_read", API.db.Boolean, default = False )
    RA_UPDATE            = API.db.Column( "ra_update", API.db.Boolean, default = False )
    RA_DELETE            = API.db.Column( "ra_delete", API.db.Boolean, default = False )
    R_REMARK             = API.db.Column( "r_remark", API.db.LONGTEXT, nullable = True )

    RA_R_ID_FK           = API.db.relationship( 'Role', backref = 'role_access', lazy = True )
    RA_MA_ID_FK          = API.db.relationship( 'ModuleAccess', backref = 'role_access', lazy = True )

    def memoryInstance( self ):
        return RoleAccessMemory( self )


API.dbtables.register( RoleAccess )


class RoleAccessMemory( DbBaseMemory ):
    __model_cls__       = RoleAccess
    __tablename__       = 'role_access'


API.memorytables.register( RoleAccessMemory )
